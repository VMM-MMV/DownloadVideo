import subprocess
import math
import concurrent.futures
import datetime

def time_to_seconds(time_str):
    """Converts a time string (HH:MM) to total seconds."""
    time_strs = time_str.split(":")
    if len(time_strs) == 3:
        return int(time_strs[0])*3600 + int(time_strs[1]) * 60 + int(time_strs[2])
    if len(time_strs) == 2:
        return (int(time_strs[0])*60) + int(time_strs[1])

def seconds_to_time(seconds):
    """Converts seconds to a formatted time string with hours, minutes, and seconds."""
    dt = datetime.datetime.fromtimestamp(seconds)
#   if dt.hour > 0:
#     return dt.strftime("%H:%M:%S")  # Include hours if necessary
#   else:
    return dt.strftime("%M:%S")  # Only minutes and seconds if no hours

def download_chunk(chunk_index, chunk_start, chunk_end, video_url):
    start_time_str = seconds_to_time(chunk_start)
    end_time_str = seconds_to_time(chunk_end)
    output_filename = f'chunk_{chunk_index + 1:02d}'

    # Build the yt-dlp command
    command = [
        'yt-dlp', 
        '--download-sections',
        f'*{str(start_time_str)}-{str(end_time_str)}', 
        '-o', f"/home/miguel/Desktop/DownloadVideo/Data/{output_filename}", 
        video_url
    ]

    # Using popen
    with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as process:
        stdout, stderr = process.communicate()
        # print(stdout, stderr)

        if process.returncode != 0:
            print(f"Chunk download failed: {stderr.decode()}")
        else:
            print(f"Chunk {chunk_index + 1} downloaded successfully")

# def download_chunk(chunk_index, chunk_start, chunk_end, video_url):
#     print("AAAAAAAAa", chunk_index, chunk_start, chunk_end)
#     start_time_str = seconds_to_time(chunk_start)
#     end_time_str = seconds_to_time(chunk_end)

#     print(f"Downloading chunk {chunk_index + 1}: Start: {start_time_str}, End: {end_time_str}")
#     subprocess.Popen([
#         'yt-dlp', 
#         '--download-sections',
#         '-o', f'/home/miguel/Desktop/DownloadVideo/Data/chunk_{chunk_index + 1}.mp4', 
#         f'{start_time_str}-{end_time_str}', 
#         video_url
#     ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) 
#     # subprocess.run([
#     #         'yt-dlp', 
#     #         '--download-sections',
#     #         f'*{str(chunk_start)}-{str(chunk_end)}', 
#     #         '-o', f'/home/miguel/Desktop/DownloadVideo/Data/chunk_{chunk_index + 1:02d}.mp4', 
#     #         video_url
#     #     ])

def download_chunks_parallel(video_url):
    # Get video duration using yt-dlp
    result = subprocess.run(['yt-dlp', '--get-duration', video_url], stdout=subprocess.PIPE, text=True)
    time_obj = time_to_seconds(result.stdout.strip())
    duration = int(time_obj)

    # Check if video is less than 5 minutes
    if duration < 300:
        print("Video is shorter than 5 minutes. Skipping...")
        return

    # Calculate chunk size and starting positions
    chunk_size = 30  # 30 sec
    number_of_clips = 10
    one_part = duration / number_of_clips
    for i in range(number_of_clips):
        chunk_start = i * one_part
        chunk_end = chunk_start + chunk_size
        download_chunk(chunk_index=i, chunk_start=chunk_start, chunk_end=chunk_end, video_url=video_url)
        # futures.append(executor.submit(
        #     download_chunk, i, chunk_start, chunk_end, video_url
        # ))

        # concurrent.futures.wait(futures)

if __name__ == "__main__":
    video_url = "https://www.youtube.com/watch?v=HN-WH7C4K0Q"  # Replace with your video URL
    download_chunks_parallel(video_url)




with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = []
        for i in range(number_of_clips):
            chunk_start += temp
            temp += chunk_size
            chunk_end += temp
            temp += separation
            print(chunk_start, chunk_end)
            futures.append(executor.submit(
                download_chunk, i, chunk_start, chunk_end, video_url
            ))

        concurrent.futures.wait(futures)